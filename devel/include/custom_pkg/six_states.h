// Generated by gencpp from file custom_pkg/six_states.msg
// DO NOT EDIT!


#ifndef CUSTOM_PKG_MESSAGE_SIX_STATES_H
#define CUSTOM_PKG_MESSAGE_SIX_STATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_pkg
{
template <class ContainerAllocator>
struct six_states_
{
  typedef six_states_<ContainerAllocator> Type;

  six_states_()
    : X(0.0)
    , Y(0.0)
    , yaw(0.0)
    , vx(0.0)
    , vy(0.0)
    , yr(0.0)  {
    }
  six_states_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , yaw(0.0)
    , vx(0.0)
    , vy(0.0)
    , yr(0.0)  {
  (void)_alloc;
    }



   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _yr_type;
  _yr_type yr;





  typedef boost::shared_ptr< ::custom_pkg::six_states_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_pkg::six_states_<ContainerAllocator> const> ConstPtr;

}; // struct six_states_

typedef ::custom_pkg::six_states_<std::allocator<void> > six_states;

typedef boost::shared_ptr< ::custom_pkg::six_states > six_statesPtr;
typedef boost::shared_ptr< ::custom_pkg::six_states const> six_statesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_pkg::six_states_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_pkg::six_states_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_pkg::six_states_<ContainerAllocator1> & lhs, const ::custom_pkg::six_states_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.yaw == rhs.yaw &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.yr == rhs.yr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_pkg::six_states_<ContainerAllocator1> & lhs, const ::custom_pkg::six_states_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_pkg::six_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_pkg::six_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_pkg::six_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_pkg::six_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_pkg::six_states_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_pkg::six_states_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_pkg::six_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df2621eb80c5f027459612d1c5297bf8";
  }

  static const char* value(const ::custom_pkg::six_states_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf2621eb80c5f027ULL;
  static const uint64_t static_value2 = 0x459612d1c5297bf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_pkg::six_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_pkg/six_states";
  }

  static const char* value(const ::custom_pkg::six_states_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_pkg::six_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold data for six system states\n"
"# X[m] Y[m] yaw angle[rad] vx[m/s] vy[m/s] yaw rate[rad/s]\n"
"float32 X \n"
"float32 Y\n"
"float32 yaw\n"
"float32 vx\n"
"float32 vy\n"
"float32 yr\n"
"\n"
;
  }

  static const char* value(const ::custom_pkg::six_states_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_pkg::six_states_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.yaw);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.yr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct six_states_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_pkg::six_states_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_pkg::six_states_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "yr: ";
    Printer<float>::stream(s, indent + "  ", v.yr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_PKG_MESSAGE_SIX_STATES_H
