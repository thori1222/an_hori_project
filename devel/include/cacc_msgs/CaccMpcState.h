// Generated by gencpp from file cacc_msgs/CaccMpcState.msg
// DO NOT EDIT!


#ifndef CACC_MSGS_MESSAGE_CACCMPCSTATE_H
#define CACC_MSGS_MESSAGE_CACCMPCSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cacc_msgs
{
template <class ContainerAllocator>
struct CaccMpcState_
{
  typedef CaccMpcState_<ContainerAllocator> Type;

  CaccMpcState_()
    : F(0.0)  {
    }
  CaccMpcState_(const ContainerAllocator& _alloc)
    : F(0.0)  {
  (void)_alloc;
    }



   typedef float _F_type;
  _F_type F;





  typedef boost::shared_ptr< ::cacc_msgs::CaccMpcState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cacc_msgs::CaccMpcState_<ContainerAllocator> const> ConstPtr;

}; // struct CaccMpcState_

typedef ::cacc_msgs::CaccMpcState_<std::allocator<void> > CaccMpcState;

typedef boost::shared_ptr< ::cacc_msgs::CaccMpcState > CaccMpcStatePtr;
typedef boost::shared_ptr< ::cacc_msgs::CaccMpcState const> CaccMpcStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cacc_msgs::CaccMpcState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cacc_msgs::CaccMpcState_<ContainerAllocator1> & lhs, const ::cacc_msgs::CaccMpcState_<ContainerAllocator2> & rhs)
{
  return lhs.F == rhs.F;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cacc_msgs::CaccMpcState_<ContainerAllocator1> & lhs, const ::cacc_msgs::CaccMpcState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cacc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cacc_msgs::CaccMpcState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cacc_msgs::CaccMpcState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cacc_msgs::CaccMpcState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79de4254f7d72d7dd22d2ce8ed43faa2";
  }

  static const char* value(const ::cacc_msgs::CaccMpcState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79de4254f7d72d7dULL;
  static const uint64_t static_value2 = 0xd22d2ce8ed43faa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cacc_msgs/CaccMpcState";
  }

  static const char* value(const ::cacc_msgs::CaccMpcState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 F\n"
;
  }

  static const char* value(const ::cacc_msgs::CaccMpcState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.F);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaccMpcState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cacc_msgs::CaccMpcState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cacc_msgs::CaccMpcState_<ContainerAllocator>& v)
  {
    s << indent << "F: ";
    Printer<float>::stream(s, indent + "  ", v.F);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CACC_MSGS_MESSAGE_CACCMPCSTATE_H
