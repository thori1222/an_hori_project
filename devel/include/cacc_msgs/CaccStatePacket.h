// Generated by gencpp from file cacc_msgs/CaccStatePacket.msg
// DO NOT EDIT!


#ifndef CACC_MSGS_MESSAGE_CACCSTATEPACKET_H
#define CACC_MSGS_MESSAGE_CACCSTATEPACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cacc_msgs
{
template <class ContainerAllocator>
struct CaccStatePacket_
{
  typedef CaccStatePacket_<ContainerAllocator> Type;

  CaccStatePacket_()
    : id(0)
    , manual(false)
    , activated(false)
    , thw(0.0)
    , alpha(0.0)
    , beta(0.0)
    , vel_gain(0)
    , vel_gain_low(0)
    , vel_gain_dec(0)
    , distance(0.0)
    , speed(0.0)
    , acceleration(0.0)  {
    }
  CaccStatePacket_(const ContainerAllocator& _alloc)
    : id(0)
    , manual(false)
    , activated(false)
    , thw(0.0)
    , alpha(0.0)
    , beta(0.0)
    , vel_gain(0)
    , vel_gain_low(0)
    , vel_gain_dec(0)
    , distance(0.0)
    , speed(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef uint8_t _manual_type;
  _manual_type manual;

   typedef uint8_t _activated_type;
  _activated_type activated;

   typedef float _thw_type;
  _thw_type thw;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _beta_type;
  _beta_type beta;

   typedef int16_t _vel_gain_type;
  _vel_gain_type vel_gain;

   typedef int16_t _vel_gain_low_type;
  _vel_gain_low_type vel_gain_low;

   typedef int16_t _vel_gain_dec_type;
  _vel_gain_dec_type vel_gain_dec;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> const> ConstPtr;

}; // struct CaccStatePacket_

typedef ::cacc_msgs::CaccStatePacket_<std::allocator<void> > CaccStatePacket;

typedef boost::shared_ptr< ::cacc_msgs::CaccStatePacket > CaccStatePacketPtr;
typedef boost::shared_ptr< ::cacc_msgs::CaccStatePacket const> CaccStatePacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cacc_msgs::CaccStatePacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cacc_msgs::CaccStatePacket_<ContainerAllocator1> & lhs, const ::cacc_msgs::CaccStatePacket_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.manual == rhs.manual &&
    lhs.activated == rhs.activated &&
    lhs.thw == rhs.thw &&
    lhs.alpha == rhs.alpha &&
    lhs.beta == rhs.beta &&
    lhs.vel_gain == rhs.vel_gain &&
    lhs.vel_gain_low == rhs.vel_gain_low &&
    lhs.vel_gain_dec == rhs.vel_gain_dec &&
    lhs.distance == rhs.distance &&
    lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cacc_msgs::CaccStatePacket_<ContainerAllocator1> & lhs, const ::cacc_msgs::CaccStatePacket_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cacc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1e7f03c3be6f5504cfdc21bdc1d3462";
  }

  static const char* value(const ::cacc_msgs::CaccStatePacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1e7f03c3be6f550ULL;
  static const uint64_t static_value2 = 0x4cfdc21bdc1d3462ULL;
};

template<class ContainerAllocator>
struct DataType< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cacc_msgs/CaccStatePacket";
  }

  static const char* value(const ::cacc_msgs::CaccStatePacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n"
"bool manual #1: manual. 0: automated\n"
"bool activated #1: activated, 0: non-activated (ghost-manual)\n"
"#int16 order\n"
"float32 thw\n"
"float32 alpha\n"
"float32 beta\n"
"int16 vel_gain\n"
"int16 vel_gain_low\n"
"int16 vel_gain_dec\n"
"float32 distance\n"
"float32 speed\n"
"float32 acceleration\n"
;
  }

  static const char* value(const ::cacc_msgs::CaccStatePacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.manual);
      stream.next(m.activated);
      stream.next(m.thw);
      stream.next(m.alpha);
      stream.next(m.beta);
      stream.next(m.vel_gain);
      stream.next(m.vel_gain_low);
      stream.next(m.vel_gain_dec);
      stream.next(m.distance);
      stream.next(m.speed);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaccStatePacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cacc_msgs::CaccStatePacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cacc_msgs::CaccStatePacket_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual);
    s << indent << "activated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activated);
    s << indent << "thw: ";
    Printer<float>::stream(s, indent + "  ", v.thw);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "beta: ";
    Printer<float>::stream(s, indent + "  ", v.beta);
    s << indent << "vel_gain: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vel_gain);
    s << indent << "vel_gain_low: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vel_gain_low);
    s << indent << "vel_gain_dec: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vel_gain_dec);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CACC_MSGS_MESSAGE_CACCSTATEPACKET_H
