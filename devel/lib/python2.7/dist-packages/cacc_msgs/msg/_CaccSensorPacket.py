# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cacc_msgs/CaccSensorPacket.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CaccSensorPacket(genpy.Message):
  _md5sum = "53f6fd0b756b85940b07ea746c26c901"
  _type = "cacc_msgs/CaccSensorPacket"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Header Header

int16 id
bool manual #1: manual. 0: automated
float32 thw
float32 alpha
float32 beta
float32 sensor2frontbumper
float32 sensor2rearbumper
int16 vel_gain
int16 vel_gain_low
int16 vel_gain_dec

#ego car
float32 x
float32 y
float32 u
float32 v
float32 yaw
float32 speed
float32 acceleration

#front car
float32 front_x
float32 front_y
float32 front_u
float32 front_v
float32 front_yaw
float32 front_speed
float32 front_acceleration
float32 front_distance

#rear car
float32 rear_x
float32 rear_y
float32 rear_u
float32 rear_v
float32 rear_yaw
float32 rear_speed
float32 rear_acceleration
float32 rear_distance

uint32 checksum"""
  __slots__ = ['id','manual','thw','alpha','beta','sensor2frontbumper','sensor2rearbumper','vel_gain','vel_gain_low','vel_gain_dec','x','y','u','v','yaw','speed','acceleration','front_x','front_y','front_u','front_v','front_yaw','front_speed','front_acceleration','front_distance','rear_x','rear_y','rear_u','rear_v','rear_yaw','rear_speed','rear_acceleration','rear_distance','checksum']
  _slot_types = ['int16','bool','float32','float32','float32','float32','float32','int16','int16','int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,manual,thw,alpha,beta,sensor2frontbumper,sensor2rearbumper,vel_gain,vel_gain_low,vel_gain_dec,x,y,u,v,yaw,speed,acceleration,front_x,front_y,front_u,front_v,front_yaw,front_speed,front_acceleration,front_distance,rear_x,rear_y,rear_u,rear_v,rear_yaw,rear_speed,rear_acceleration,rear_distance,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CaccSensorPacket, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.manual is None:
        self.manual = False
      if self.thw is None:
        self.thw = 0.
      if self.alpha is None:
        self.alpha = 0.
      if self.beta is None:
        self.beta = 0.
      if self.sensor2frontbumper is None:
        self.sensor2frontbumper = 0.
      if self.sensor2rearbumper is None:
        self.sensor2rearbumper = 0.
      if self.vel_gain is None:
        self.vel_gain = 0
      if self.vel_gain_low is None:
        self.vel_gain_low = 0
      if self.vel_gain_dec is None:
        self.vel_gain_dec = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.u is None:
        self.u = 0.
      if self.v is None:
        self.v = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.speed is None:
        self.speed = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.front_x is None:
        self.front_x = 0.
      if self.front_y is None:
        self.front_y = 0.
      if self.front_u is None:
        self.front_u = 0.
      if self.front_v is None:
        self.front_v = 0.
      if self.front_yaw is None:
        self.front_yaw = 0.
      if self.front_speed is None:
        self.front_speed = 0.
      if self.front_acceleration is None:
        self.front_acceleration = 0.
      if self.front_distance is None:
        self.front_distance = 0.
      if self.rear_x is None:
        self.rear_x = 0.
      if self.rear_y is None:
        self.rear_y = 0.
      if self.rear_u is None:
        self.rear_u = 0.
      if self.rear_v is None:
        self.rear_v = 0.
      if self.rear_yaw is None:
        self.rear_yaw = 0.
      if self.rear_speed is None:
        self.rear_speed = 0.
      if self.rear_acceleration is None:
        self.rear_acceleration = 0.
      if self.rear_distance is None:
        self.rear_distance = 0.
      if self.checksum is None:
        self.checksum = 0
    else:
      self.id = 0
      self.manual = False
      self.thw = 0.
      self.alpha = 0.
      self.beta = 0.
      self.sensor2frontbumper = 0.
      self.sensor2rearbumper = 0.
      self.vel_gain = 0
      self.vel_gain_low = 0
      self.vel_gain_dec = 0
      self.x = 0.
      self.y = 0.
      self.u = 0.
      self.v = 0.
      self.yaw = 0.
      self.speed = 0.
      self.acceleration = 0.
      self.front_x = 0.
      self.front_y = 0.
      self.front_u = 0.
      self.front_v = 0.
      self.front_yaw = 0.
      self.front_speed = 0.
      self.front_acceleration = 0.
      self.front_distance = 0.
      self.rear_x = 0.
      self.rear_y = 0.
      self.rear_u = 0.
      self.rear_v = 0.
      self.rear_yaw = 0.
      self.rear_speed = 0.
      self.rear_acceleration = 0.
      self.rear_distance = 0.
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hB5f3h23fI().pack(_x.id, _x.manual, _x.thw, _x.alpha, _x.beta, _x.sensor2frontbumper, _x.sensor2rearbumper, _x.vel_gain, _x.vel_gain_low, _x.vel_gain_dec, _x.x, _x.y, _x.u, _x.v, _x.yaw, _x.speed, _x.acceleration, _x.front_x, _x.front_y, _x.front_u, _x.front_v, _x.front_yaw, _x.front_speed, _x.front_acceleration, _x.front_distance, _x.rear_x, _x.rear_y, _x.rear_u, _x.rear_v, _x.rear_yaw, _x.rear_speed, _x.rear_acceleration, _x.rear_distance, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 125
      (_x.id, _x.manual, _x.thw, _x.alpha, _x.beta, _x.sensor2frontbumper, _x.sensor2rearbumper, _x.vel_gain, _x.vel_gain_low, _x.vel_gain_dec, _x.x, _x.y, _x.u, _x.v, _x.yaw, _x.speed, _x.acceleration, _x.front_x, _x.front_y, _x.front_u, _x.front_v, _x.front_yaw, _x.front_speed, _x.front_acceleration, _x.front_distance, _x.rear_x, _x.rear_y, _x.rear_u, _x.rear_v, _x.rear_yaw, _x.rear_speed, _x.rear_acceleration, _x.rear_distance, _x.checksum,) = _get_struct_hB5f3h23fI().unpack(str[start:end])
      self.manual = bool(self.manual)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hB5f3h23fI().pack(_x.id, _x.manual, _x.thw, _x.alpha, _x.beta, _x.sensor2frontbumper, _x.sensor2rearbumper, _x.vel_gain, _x.vel_gain_low, _x.vel_gain_dec, _x.x, _x.y, _x.u, _x.v, _x.yaw, _x.speed, _x.acceleration, _x.front_x, _x.front_y, _x.front_u, _x.front_v, _x.front_yaw, _x.front_speed, _x.front_acceleration, _x.front_distance, _x.rear_x, _x.rear_y, _x.rear_u, _x.rear_v, _x.rear_yaw, _x.rear_speed, _x.rear_acceleration, _x.rear_distance, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 125
      (_x.id, _x.manual, _x.thw, _x.alpha, _x.beta, _x.sensor2frontbumper, _x.sensor2rearbumper, _x.vel_gain, _x.vel_gain_low, _x.vel_gain_dec, _x.x, _x.y, _x.u, _x.v, _x.yaw, _x.speed, _x.acceleration, _x.front_x, _x.front_y, _x.front_u, _x.front_v, _x.front_yaw, _x.front_speed, _x.front_acceleration, _x.front_distance, _x.rear_x, _x.rear_y, _x.rear_u, _x.rear_v, _x.rear_yaw, _x.rear_speed, _x.rear_acceleration, _x.rear_distance, _x.checksum,) = _get_struct_hB5f3h23fI().unpack(str[start:end])
      self.manual = bool(self.manual)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hB5f3h23fI = None
def _get_struct_hB5f3h23fI():
    global _struct_hB5f3h23fI
    if _struct_hB5f3h23fI is None:
        _struct_hB5f3h23fI = struct.Struct("<hB5f3h23fI")
    return _struct_hB5f3h23fI
