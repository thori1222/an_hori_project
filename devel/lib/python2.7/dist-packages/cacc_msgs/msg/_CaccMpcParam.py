# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cacc_msgs/CaccMpcParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CaccMpcParam(genpy.Message):
  _md5sum = "520e747c091a36b66d7fea5adeed4945"
  _type = "cacc_msgs/CaccMpcParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Ds
float32 Dmin
float32 umax
float32 umin

int32   sf0
int32   sf1
int32   sf2
int32   q0
int32   q1
int32   q2
int32   r
int32   su
int32   sd

float32 tf
float32 ht
int16   dv
int16   zeta
int16   kmax"""
  __slots__ = ['Ds','Dmin','umax','umin','sf0','sf1','sf2','q0','q1','q2','r','su','sd','tf','ht','dv','zeta','kmax']
  _slot_types = ['float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float32','float32','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Ds,Dmin,umax,umin,sf0,sf1,sf2,q0,q1,q2,r,su,sd,tf,ht,dv,zeta,kmax

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CaccMpcParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Ds is None:
        self.Ds = 0.
      if self.Dmin is None:
        self.Dmin = 0.
      if self.umax is None:
        self.umax = 0.
      if self.umin is None:
        self.umin = 0.
      if self.sf0 is None:
        self.sf0 = 0
      if self.sf1 is None:
        self.sf1 = 0
      if self.sf2 is None:
        self.sf2 = 0
      if self.q0 is None:
        self.q0 = 0
      if self.q1 is None:
        self.q1 = 0
      if self.q2 is None:
        self.q2 = 0
      if self.r is None:
        self.r = 0
      if self.su is None:
        self.su = 0
      if self.sd is None:
        self.sd = 0
      if self.tf is None:
        self.tf = 0.
      if self.ht is None:
        self.ht = 0.
      if self.dv is None:
        self.dv = 0
      if self.zeta is None:
        self.zeta = 0
      if self.kmax is None:
        self.kmax = 0
    else:
      self.Ds = 0.
      self.Dmin = 0.
      self.umax = 0.
      self.umin = 0.
      self.sf0 = 0
      self.sf1 = 0
      self.sf2 = 0
      self.q0 = 0
      self.q1 = 0
      self.q2 = 0
      self.r = 0
      self.su = 0
      self.sd = 0
      self.tf = 0.
      self.ht = 0.
      self.dv = 0
      self.zeta = 0
      self.kmax = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f9i2f3h().pack(_x.Ds, _x.Dmin, _x.umax, _x.umin, _x.sf0, _x.sf1, _x.sf2, _x.q0, _x.q1, _x.q2, _x.r, _x.su, _x.sd, _x.tf, _x.ht, _x.dv, _x.zeta, _x.kmax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.Ds, _x.Dmin, _x.umax, _x.umin, _x.sf0, _x.sf1, _x.sf2, _x.q0, _x.q1, _x.q2, _x.r, _x.su, _x.sd, _x.tf, _x.ht, _x.dv, _x.zeta, _x.kmax,) = _get_struct_4f9i2f3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f9i2f3h().pack(_x.Ds, _x.Dmin, _x.umax, _x.umin, _x.sf0, _x.sf1, _x.sf2, _x.q0, _x.q1, _x.q2, _x.r, _x.su, _x.sd, _x.tf, _x.ht, _x.dv, _x.zeta, _x.kmax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.Ds, _x.Dmin, _x.umax, _x.umin, _x.sf0, _x.sf1, _x.sf2, _x.q0, _x.q1, _x.q2, _x.r, _x.su, _x.sd, _x.tf, _x.ht, _x.dv, _x.zeta, _x.kmax,) = _get_struct_4f9i2f3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f9i2f3h = None
def _get_struct_4f9i2f3h():
    global _struct_4f9i2f3h
    if _struct_4f9i2f3h is None:
        _struct_4f9i2f3h = struct.Struct("<4f9i2f3h")
    return _struct_4f9i2f3h
