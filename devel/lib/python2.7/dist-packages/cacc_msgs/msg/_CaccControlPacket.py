# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cacc_msgs/CaccControlPacket.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CaccControlPacket(genpy.Message):
  _md5sum = "ca73aaf0f9afa68bd8dfa673d8298a2c"
  _type = "cacc_msgs/CaccControlPacket"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 id
float32 vel_ref
float32 acc_ref

uint32 checksum"""
  __slots__ = ['id','vel_ref','acc_ref','checksum']
  _slot_types = ['int16','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,vel_ref,acc_ref,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CaccControlPacket, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.vel_ref is None:
        self.vel_ref = 0.
      if self.acc_ref is None:
        self.acc_ref = 0.
      if self.checksum is None:
        self.checksum = 0
    else:
      self.id = 0
      self.vel_ref = 0.
      self.acc_ref = 0.
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h2fI().pack(_x.id, _x.vel_ref, _x.acc_ref, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.id, _x.vel_ref, _x.acc_ref, _x.checksum,) = _get_struct_h2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h2fI().pack(_x.id, _x.vel_ref, _x.acc_ref, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.id, _x.vel_ref, _x.acc_ref, _x.checksum,) = _get_struct_h2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h2fI = None
def _get_struct_h2fI():
    global _struct_h2fI
    if _struct_h2fI is None:
        _struct_h2fI = struct.Struct("<h2fI")
    return _struct_h2fI
